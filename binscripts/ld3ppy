#!/usr/bin/env python3

# TODO: close connections to ldap?

import ldap # install python-ldap in debian/ubuntu, redhat uses ?
import os
import argparse
from pprint import pprint
import configparser

encoding = 'utf-8'

config = configparser.ConfigParser()
configfile='ldappy.cfg'
configdir=os.path.expanduser('~/.config/%s' % configfile)
if (os.path.exists(configfile) and os.path.isfile(configfile)):
    config.read(configfile)
elif (os.path.exists(configdir) and os.path.isfile(configdir)):
    config.read(configdir)
else:
    print('no config file found')
    exit()
serverip = "10.12.5.11"
serverport = "3268"
serveraddress='ldap://'+serverip+':'+serverport

dn = config['general']['dn']
pw = config['general']['pw']

QADLG = "CN=QA-DLG,OU=Technology,OU=Domain Local,OU=Waterloo Security Groups,OU=Waterloo,DC=ykf,DC=navtech,DC=corp"
DEVDLG = "CN=DEV-DLG,OU=Technology,OU=Domain Local,OU=Waterloo Security Groups,OU=Waterloo,DC=ykf,DC=navtech,DC=corp"
BUILDDLG = "CN=BUILD-DLG,OU=Technology,OU=Domain Local,OU=Waterloo Security Groups,OU=Waterloo,DC=ykf,DC=navtech,DC=corp"


def getInfoforMember(member,serveraddress=serveraddress,fields=['userPrincipalName']):
   l = ldap.initialize(serveraddress)
   l.simple_bind_s(dn,pw)
   memberinfo = l.search_s(member,ldap.SCOPE_BASE,'(objectClass=*)',fields)
   return memberinfo

def getEmailforMember(member,serveraddress=serveraddress):
   l = ldap.initialize(serveraddress)
   l.simple_bind_s(dn,pw)
   domaininfo = l.search_s(member,ldap.SCOPE_BASE,'(objectClass=*)',['userPrincipalName'])
   pprint(domaininfo.decode(encoding))

def getsAMAccountNameforMember(member,serveraddress=serveraddress):
   l = ldap.initialize(serveraddress)
   l.simple_bind_s(dn,pw)
   domaininfo = l.search_s(member,ldap.SCOPE_BASE,'(objectClass=*)',['sAMAccountName'])
   #pprint(domaininfo)
   print(domaininfo[0][1]['sAMAccountName'][0].decode(encoding))

def checkUnixAttributes(userinfo, args):
  if 'memberOf' in userinfo[1] and (QADLG in userinfo[1]['memberOf'] or DEVDLG in userinfo[1]['memberOf'] or BUILDDLG in userinfo[1]['memberOf']):
      print("Checking for unix attributes...")
      # can't use Global Catalog, because these attributes aren't provided
      #searchBase="dc=ykf,dc=navtech,dc=corp"
      searchBase="ou=Waterloo,dc=ykf,dc=navtech,dc=corp"
      #binddn="cn=ldapuser,cn=Users,dc=ykf,dc=navtech,dc=corp"
      #bindpw="n@vt3ch"
      serveraddress='ldap://%s'%serverip
      l = ldap.initialize(serveraddress)
      l.simple_bind_s(dn,pw)
      domaininfo = l.search_s(searchBase,ldap.SCOPE_SUBTREE,searchfilter(args),['uidNumber','unixHomeDirectory'])
      pprint(domaininfo.decode(encoding))
      try:
          if 'unixHomeDirectory' in domaininfo[0][1]:
              print("Looks ok...")
          else:
              print("Unix attributes appear to be missing")
      except:
          print("Exception thrown")
          print(domaininfo)
  else:
      print("Not checking for Unix attributes (not in QA or DEV DLG)")

def getdefaultargs(args=["--name","mptatschek"]):
    return parseargs(args)

def configure_argparse():
   argparser = argparse.ArgumentParser(description='Show ldap infomation for user - default is group membership')

   argparser.add_argument("name", help='name to query for in ldap')
   argparser.add_argument("-f","--full", help='show full ldap info',action="store_true")
   #argparser.add_argument("-g","--group", help='seach for group, not user',default = "sAMAccountName=foo")
   argparser.add_argument("-m","--members", help='show members',action="store_true")
   argparser.add_argument("-s","--searchfilter", help='search Filter', default = "sAMAccountName")
   argparser.add_argument("-n","--nameonly", help='list name only (single line)', action="store_true")
   argparser.add_argument("-i","--ip", help='ldap server address', default = serverip)
   argparser.add_argument("-b","--base", help='search base', default = "dc=navtech,dc=corp")
   argparser.add_argument("-p","--port", help='ldap server port', default = serverport)
   argparser.add_argument("-e","--emails", help='only output the email addresses for a group',action="store_true")
   argparser.add_argument("-u","--userlist", help='get full list of users',action="store_true")
   argparser.add_argument("-x","--svn2git", help='output authors info for svn to git migration',action="store_true")
   argparser.add_argument("--membersAMAccount", help='list AMAccountNames for members (for svn permission check)',action="store_true")
   argparser.add_argument("-V","--V1", help='Get just the fields needed for Version One',action="store_true")
   return argparser


def searchfilter(args):
   #searchFilter = "(%s=%s)" % (args.searchfilter, args.name)
   searchFilter = "(&(objectClass=*)(%s=%s))" % (args.searchfilter, args.name)
   #searchFilter = "(&(objectClass=user)(%s=%s))" % (args.searchfilter, args.name)
   #searchFilter = "(&(objectCategory=Person)(%s=%s))" % (args.searchfilter, args.name)
   #searchFilter = "(&(objectClass=Group)(%s=%s))" % (args.searchfilter, args.name)
   return searchFilter
   #if args.group:
   #   searchFilter = "(%s)" % (args.group)
   #searchFilter = "(&(objectClass=group)(sAMAccountName=DEV-DLG))"

def searchfields(args):
   if args.full:
      fields = []
   elif args.members or args.membersAMAccount:
      fields = ['distinguishedName','member']
   elif args.V1:
      fields = ['sAMAccountName','department','distinguishedName','givenName','sn','mail','telephoneNumber','title']
   elif args.nameonly:
      fields = ['distinguishedName']
   elif args.emails:
      fields = ['member']
   #elif args.memberOf:
   #   fields = ['distinguishedName','memberOf']
   else:
      fields = ['sAMAccountName','title','description','department','gidNumber','uidNumber','distinguishedName','givenName','sn','mail','telephoneNumber','memberOf','uidNumber','gidNumber','homedirectory','userAccountControl']
   return fields

def getdomaininfo(args):
   serveraddress='ldap://'+args.ip+':'+args.port
   l = ldap.initialize(serveraddress)
   l.simple_bind_s(dn,pw)
   if args.userlist:
      # spiratest uses sAMAccountName, mail, givenName, sn
      #domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(objectClass=User)(!(objectClass=Computer))(objectCategory=person))',['sAMAccountName','mail','givenName','sn'])
	  # only in NAVBLUETECH_INTERNAL group
      #domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(objectCategory=person)(memberOf=CN=NAVBLUETECH_INTERNAL,OU=Technology,OU=Universal,OU=Waterloo Security Groups,OU=Waterloo,DC=ykf,DC=navtech,DC=corp)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(objectClass=User)(!(objectClass=Computer)))',['sAMAccountName','mail','givenName','sn'])
      #domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(mail=*)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(objectClass=User)(!(objectClass=Computer))(objectCategory=person))',['sAMAccountName','mail','givenName','sn'])
      #domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(mail=*)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(objectClass=User)(!(objectClass=Computer))(objectCategory=person))',['sAMAccountName','mail','givenName','sn'])
      #domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(mail=*)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(userAccountControl<=600)(objectClass=User)(!(objectClass=Computer))(objectCategory=person))',['sAMAccountName','mail','givenName','sn','userAccountControl'])
      domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(mail=*)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(objectClass=User)(!(objectClass=Computer))(objectCategory=person))',['sAMAccountName','userAccountControl'])
      # just this gets us to about 1450 users
	  #domaininfo = l.search_s("DC=navtech,DC=corp", ldap.SCOPE_SUBTREE,'(&(!(userAccountControl:1.2.840.113556.1.4.803:=2))(userAccountControl:1.2.840.113556.1.4.803:=512))',['sAMAccountName','userAccountControl'])
   else:
      domaininfo = l.search_s(args.base,ldap.SCOPE_SUBTREE,searchfilter(args),searchfields(args))
   return domaininfo
    
def output_users(domaininfo, args):
   if args.svn2git and len(domaininfo)==0:
      print("%s = Unknown <noreply@navblue.aero>" % args.name) 
   
   for userinfo in domaininfo:
      #pprint(userinfo)
      if args.svn2git:
         # uname = real name <email>
         if 'main' in userinfo[1]:
            email = userinfo[1].get('mail')[0]
         else:
            email = "noreply@navblue.aero"
         authorsline = "%s = %s %s <%s>" % (args.name, userinfo[1].get('givenName')[0], userinfo[1].get('sn')[0], email)
         for member in userinfo[1]['member']:
             getsAMAccountNameforMember(member)
      elif args.V1:
         print ("%s %s" % (userinfo[1]['givenName'][0].decode(encoding),userinfo[1]['sn'][0].decode(encoding)))
         if 'sAMAccountName' in userinfo[1]:
            # assuming standard entry, this will get the office 
            officeTLA = userinfo[0].replace(',DC=navtech,DC=corp','')[-3:].upper()
            # [2:-2] strips [' ']
            print("Short username: %s" % userinfo[1]['sAMAccountName'][0].decode(encoding))
            print("Username: %s\%s" % (officeTLA,userinfo[1]['sAMAccountName'][0].decode(encoding)))
            print("email: %s" % userinfo[1]['mail'][0].decode(encoding))
            print("title: %s" % userinfo[1]['title'][0].decode(encoding))
      else:    
         print(userinfo[0])

         if 'distinguishedName' in userinfo[1]: 
            print("User:%s" % userinfo[1]['distinguishedName'][0].decode("utf-8"))
         for item in userinfo[1].items():
            key, value = item
            if len(value) > 1:
               print("%s:" % key)
               for subitem in value:
                  print(subitem.decode(encoding))
            else:
               print("%s: %s" % (key, value[0].decode("utf-8")))
         print("------------------------------")
         if args.emails:
            for item in userinfo[1].items():
               key, members = item
               for member in members:
                  getEmailforMember(member)
         checkUnixAttributes(userinfo,args)
         if 'userAccountControl' in userinfo[1]:
            if int(userinfo[1]['userAccountControl'][0]) & 2:
               print("* User seems to be disabled")

def getargs(config):
   argparser = configure_argparse()
   args=argparser.parse_args(config)
   return args

def main():
   argparser = configure_argparse()
   args=argparser.parse_args()
   output_users(getdomaininfo(args),args)
   return 

if __name__ == "__main__":
    main()
